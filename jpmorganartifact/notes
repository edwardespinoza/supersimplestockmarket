java -cp junit.jar junit.textui.TestRunner AllTests

java -jar jar.txt

set path=C:\Program Files\Java\jdk1.8.0_91\bin (EXAMPLE)

"JUNIT"
java -cp "stock.jar;lib/*" junit.textui.TestRunner com.jpmorgan.supersimplestocks.engines.TradeProcessorTest
java -cp "stock.jar;lib/*" junit.textui.TestRunner com.jpmorgan.supersimplestocks.test.AllTests

"JAR APP"
java -cp "stock.jar;lib/*" com.jpmorgan.supersimplestocks.AppSuperSimpleStocks conf/config.properties

--NOVAjava -classpath stock.jar com.jpmorgan.supersimplestocks.AppSuperSimpleStocks






test.TestSuite

java -cp $CLASSPATH  com.gft.pam.twitter.producer.TwitterProducer $1 

//				lines()
//			    .substream(1)
//			    .map(mapToPerson)
//			    .filter(person -> person.getAge() > 17)
//			    .limit(50)
//			    .collect(toList());
		
		*********
		
		//ToList
//		List<StockExchangeVO> stockExchange = stream.map(mapToStockExchange).limit(100).collect(Collectors.toList());
//		stockExchange.forEach((vo) -> logger.debug(vo.toString()));


		//PrintMap
//		stockExchange.keySet()
//		.forEach(key -> {
//        	 StockExchangeVO getVO = stockExchange.get(key);
//                     System.out.println(getVO.toString());
//         });

				//stream.forEach(System.out::println);
				
				
				//		double result = seProcess.calculateDividendYield(price, seVO);
//		assertEquals(Double.valueOf(expected), Double.valueOf(0.00001d), Double.valueOf(DELTA));

//Iterate array

 for (int i = 0; i < A.length; i++){
            int j = sumHigher (A, i);
            int h = sumLower (A, i);
            if (j == h) return i;
        }
        
        //Iterate ArrayList
        List<String> names = new LinkedList<>();

// ... add some names to the collection

names.forEach(name -> System.out.println(name));
				
		
		String pattern = "Trade Object [timeStamp: %tF %tT, stock: %s, indicator: %s, shares quantity: %7d, price: %8.2f]";
		return String.format(pattern, timeStamp,timeStamp, stock, tradeIndicator, sharesQuantity, price);
	
		
					allShareIndex = StatUtils.geometricMean(stockPricesArray);
					
					
					//Iterate Map
					
//		stockExchange.forEach((k,v)->{
//			System.out.println("Item : " + k + " Count : " + v);
//			if("E".equals(k)){
//				System.out.println("Hello E");
//			}
//		});


*///Asignar streams arraylist
		//Initialise new Map
		stockExchange.forEach((k,v)->{
			mapVWSP.put(k, 0.0);
		});
		
//		Iterate Array filtering only n seconds trades
//		trades.stream().filter(trade -> trade.getStockSymbol().equals("TEA")).forEach(trade -> {
		trades.stream().filter(trade -> trade.isFromTimeHorizon(seconds) == true).forEach(trade -> {
			mapVWSP.computeIfPresent(trade.getStockSymbol(), (k,v) -> v + trade.getPrice());  
		});
		

//recorring iterate array
//		mapVWSP.forEach((k,v)->{
//			System.out.println("STOCK SYMBOL: " + k + " | VWSP : " + v );
//		});


///
	public double calculateGBCEAllShareIndex() throws Exception{
		double allShareIndex = 0.0;
		
		// Calculate stock price for all stock in the system
		HashMap<String, Stock> stocks = stocksEntityManager.getStocks();
		ArrayList<Double> stockPrices = new ArrayList<Double>();
		for(String stockSymbol: stocks.keySet() ){
			double stockPrice = calculateStockPriceinRange(stockSymbol, 0);
			if(stockPrice > 0){
				stockPrices.add(stockPrice);
			}
		}
		
		if(stockPrices.size()>=1){
			double[] stockPricesArray = new double[stockPrices.size()];
			
			for(int i=0; i<=(stockPrices.size()-1); i++){
				stockPricesArray[i] = stockPrices.get(i).doubleValue();
			}
			// Calculates the GBCE All Share Index
			allShareIndex = StatUtils.geometricMean(stockPricesArray);
		}
		return allShareIndex;
	}
